cmake_minimum_required(VERSION 3.8)


# create the testing file and list of tests
create_test_sourcelist (Benchs
  micro_benchs.cpp
  alloc_dealloc_same_thread.cpp
  alloc_growing_size.cpp
  alloc_dealloc_separate_thread.cpp
  larson.cpp
  mstress.cpp
  rptest.cpp
  cache_scratch.cpp
  glibc_malloc_thread.cpp
  malloc_large.cpp
  xmalloc.cpp
  malloc_survey.cpp
  alloc_test.cpp
  )

# add the executable
add_executable (micro_benchs ${Benchs})

set_property(TARGET micro_benchs PROPERTY CXX_STANDARD 14)


if (WIN32 AND CMAKE_CXX_COMPILER_ID MATCHES "GNU")
	# mingw
	target_link_options(micro_benchs PRIVATE -lKernel32 -lpsapi -lBcrypt -fopenmp)
elseif(UNIX AND (CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR CMAKE_CXX_COMPILER_ID MATCHES "GNU"))
    target_link_options(micro_benchs PRIVATE  -lpthread -fopenmp)
endif()

# msvc warnings generated by micro_benchs.cpp
if(WIN32)
	target_compile_definitions(micro_benchs PRIVATE -D_CRT_SECURE_NO_WARNINGS)
endif()

if(MICRO_ENABLE_TIME_STATISTICS)
	target_compile_definitions(micro_benchs PRIVATE -DMICRO_ENABLE_TIME_STATISTICS)
endif()
	
if(MICRO_ENABLE_ASSERT)
	target_compile_definitions(micro_benchs PRIVATE -DMICRO_ENABLE_ASSERT)
endif()
	
if(MICRO_ZERO_MEMORY)
	target_compile_definitions(micro_benchs PRIVATE -DMICRO_ZERO_MEMORY)
endif()
	
if(MICRO_NO_FILE_MAPPING)
	target_compile_definitions(micro_benchs PRIVATE -DMICRO_NO_FILE_MAPPING)
endif()

target_compile_definitions(micro_benchs PRIVATE MICRO_MEMORY_LEVEL=${MICRO_MEMORY_LEVEL})

if(MICRO_BENCH_MICROMALLOC)
	target_compile_definitions(micro_benchs PRIVATE -DMICRO_BENCH_MICROMALLOC)
endif()

# Configure mimalloc
IF(MICRO_BENCH_MIMALLOC)
	
	include(FetchContent)
	set(MI_BUILD_SHARED OFF CACHE INTERNAL "")  # Forces the value
	set(MI_BUILD_OBJECT OFF CACHE INTERNAL "")  # Forces the value
	set(MI_BUILD_TESTS OFF CACHE INTERNAL "")  # Forces the value
	set(MI_OVERRIDE OFF CACHE INTERNAL "")  # Forces the value
	FetchContent_Declare(
	  mimalloc
	  GIT_REPOSITORY https://github.com/microsoft/mimalloc.git
	  GIT_TAG        dev
	  CMAKE_ARGS "-DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_BINDIR} -DCMAKE_BUILD_TYPE=Release -DMI_BUILD_SHARED=OFF -DMI_BUILD_OBJECT=OFF -DMI_BUILD_TESTS=OFF"
	)
	FetchContent_GetProperties(mimalloc)
	if(NOT mimalloc_POPULATED)
	  # Fetch the content using previously declared details
	  FetchContent_Populate(mimalloc)

	  # Bring the populated content into the build
	  add_subdirectory(${mimalloc_SOURCE_DIR} ${mimalloc_BINARY_DIR})
	endif()
	#FetchContent_MakeAvailable(mimalloc micro_benchs)
	
	#install(DIRECTORY ${CMAKE_BINARY_DIR}/benchs/mimalloc-prefix/src/mimalloc-build/bin/lib/ DESTINATION "${CMAKE_INSTALL_PREFIX}/bin")
	
	target_compile_definitions(micro_benchs PRIVATE -DMICRO_BENCH_MIMALLOC)
	
	#find_package(mimalloc 1.0 REQUIRED)
	target_link_libraries(micro_benchs PRIVATE mimalloc-static)
	#target_include_directories(micro_benchs PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
endif()


# Configure TBB
IF(MICRO_BENCH_TBB)
	
	include(FetchContent)
	set(TBB_TEST OFF CACHE INTERNAL "")  # Forces the value
	set(TBB_EXAMPLES OFF CACHE INTERNAL "")  # Forces the value
	set(TBB_FUZZ_TESTING OFF CACHE INTERNAL "")  # Forces the value
	FetchContent_Declare(
	  tbb
	  GIT_REPOSITORY https://github.com/oneapi-src/oneTBB.git
	  GIT_TAG        master
	  CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_BINDIR} -DCMAKE_BUILD_TYPE=Release -DTBB_TEST=OFF -DTBB_EXAMPLES=OFF -DTBB_FUZZ_TESTING=OFF
	)
	FetchContent_GetProperties(tbb)
	if(NOT tbb_POPULATED)
	  # Fetch the content using previously declared details
	  FetchContent_Populate(tbb)

	  # Set custom variables, policies, etc.
	  # ...

	  # Bring the populated content into the build
	  add_subdirectory(${tbb_SOURCE_DIR} ${tbb_BINARY_DIR})
	endif()
	#FetchContent_MakeAvailable(mimalloc micro_benchs)
	
	#install(DIRECTORY ${CMAKE_BINARY_DIR}/benchs/mimalloc-prefix/src/mimalloc-build/bin/lib/ DESTINATION "${CMAKE_INSTALL_PREFIX}/bin")
	
	target_compile_definitions(micro_benchs PRIVATE -DMICRO_BENCH_TBB)
	
	#find_package(mimalloc 1.0 REQUIRED)
	target_link_libraries(micro_benchs PRIVATE tbb tbbmalloc)
	#target_include_directories(micro_benchs PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
endif()


# Configure mimalloc
IF(MICRO_BENCH_SNMALLOC)
	
	include(FetchContent)
	set(SNMALLOC_BUILD_TESTING OFF CACHE INTERNAL "")  # Forces the value
	set(SNMALLOC_STATIC_LIBRARY ON CACHE INTERNAL "")  # Forces the value
	#set(SNMALLOC_HEADER_ONLY_LIBRARY ON CACHE INTERNAL "")  # Forces the value
	FetchContent_Declare(
	  snmalloc
	  GIT_REPOSITORY https://github.com/microsoft/snmalloc.git
	  GIT_TAG        main
	)
	FetchContent_GetProperties(snmalloc)
	if(NOT snmalloc)
	  # Fetch the content using previously declared details
	  FetchContent_Populate(snmalloc)

	  # Bring the populated content into the build
	  add_subdirectory(${snmalloc_SOURCE_DIR} ${snmalloc_BINARY_DIR})
	endif()
	#FetchContent_MakeAvailable(mimalloc micro_benchs)
		
	target_compile_definitions(micro_benchs PRIVATE -DMICRO_BENCH_SNMALLOC)
	target_include_directories(micro_benchs PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
	target_link_libraries(micro_benchs PRIVATE snmallocshim-static)
endif()

if(MICRO_BENCH_JEMALLOC_PATH)
	target_include_directories(micro_benchs PRIVATE ${MICRO_BENCH_JEMALLOC_PATH}/include/jemalloc)
	target_link_directories(micro_benchs PRIVATE ${MICRO_BENCH_JEMALLOC_PATH}/lib)
	target_link_libraries(micro_benchs PRIVATE jemalloc)
	target_compile_definitions(micro_benchs PRIVATE -DMICRO_BENCH_JEMALLOC)

	FILE(GLOB JEMALLOC_LIBS "${MICRO_BENCH_JEMALLOC_PATH}/lib/libjemalloc.so*")
	install(FILES ${JEMALLOC_LIBS} DESTINATION ${CMAKE_INSTALL_BINDIR})
endif()

if(MICRO_BENCH_MALLOC)
	target_compile_definitions(micro_benchs PRIVATE -DMICRO_BENCH_MALLOC)
endif()

target_include_directories(micro_benchs PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
target_include_directories(micro_benchs PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/../..)

set_target_properties(micro_benchs PROPERTIES INSTALL_RPATH "$ORIGIN")


install (TARGETS micro_benchs RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} )
